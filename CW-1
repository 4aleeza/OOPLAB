#include <iostream>
using namespace std;
/*Create two classes: Car and Engine. Demonstrate composition by ensuring:
 Car has-a Engine as a direct member (e.g., Engine engine; inside Car).  
The Engine object is fully contained within Car (i.e., the Car controls the Engine’s
lifetime).
Requirements
1. Engine
o Has a start() and stop() function that just prints messages (e.g., "Engine started",
"Engine stopped").
o Has a member variable (e.g., bool isRunning) to indicate if the engine is running.
2. Car
o Declares a private Engine engine; as a composition member. o Provides a startCar() and stopCar() 
method that delegates to engine.start() and
engine.stop().
o In main() or a test function, create a Car object and call startCar() and stopCar().*/
class Engine {
	bool isrunning;
public:
	void start() {
		isrunning = true;
		cout << "Engine Started\n";
	}
	void stop() {
		isrunning = false;
		cout << "Engine Stopped\n";
	}
};
class Car {
	Engine engine;
public:
	void startcar() {
		engine.start();
	}
	void stopcar() {
		engine.stop();
	}
};
int main() {
	Car obj;
	obj.startcar();
	obj.stopcar();
}
