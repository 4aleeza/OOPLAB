#include <iostream>
#include <stdexcept>
using namespace std;

class Fraction {
    int numerator, denominator;
    
    int gcd(int a, int b) {
        if (b == 0) return a;
        return gcd(b, a % b);
}
    
    void simplify() {
        int divisor = gcd(abs(numerator), abs(denominator));
        numerator /= divisor;
        denominator /= divisor;
        
        if (denominator < 0) {
            numerator = -numerator;
            denominator = -denominator;
        }
    }
    
public:
    Fraction(int num = 0, int denom = 1) : numerator(num), denominator(denom) {
        if (denominator == 0) throw invalid_argument("Denominator cannot be zero");
        simplify();
    }
    
    friend Fraction operator+(const Fraction& f1, const Fraction& f2) {
        int num = f1.numerator * f2.denominator + f2.numerator * f1.denominator;
        int denom = f1.denominator * f2.denominator;  // Fixed
        return Fraction(num, denom);
    }
    
    friend Fraction operator-(const Fraction& f1, const Fraction& f2) {
        int num = f1.numerator * f2.denominator - f2.numerator * f1.denominator;  // Fixed
        int denom = f1.denominator * f2.denominator;
        return Fraction(num, denom);
    }
    
    friend Fraction operator*(const Fraction& f1, const Fraction& f2) {
        int num = f1.numerator * f2.numerator;
        int denom = f1.denominator * f2.denominator;
        return Fraction(num, denom);
    }
    
    friend Fraction operator/(const Fraction& f1, const Fraction& f2) {
        if (f2.numerator == 0) throw invalid_argument("Cannot divide by zero");
        int num = f1.numerator * f2.denominator;
        int denom = f1.denominator * f2.numerator;
        return Fraction(num, denom);  // Added return
    }
    
    friend bool operator==(const Fraction& f1, const Fraction& f2) {
        return f1.numerator * f2.denominator == f1.denominator * f2.numerator;
    }
    
    friend bool operator!=(const Fraction& f1, const Fraction& f2) {
        return !(f1 == f2);
    }
    
    friend bool operator<(const Fraction& f1, const Fraction& f2) {
        return f1.numerator * f2.denominator < f1.denominator * f2.numerator;
    }
    
    friend bool operator>(const Fraction& f1, const Fraction& f2) {
        return f2 < f1;
    }
    
    friend bool operator<=(const Fraction& f1, const Fraction& f2) {
        return (f1 < f2) || (f1 == f2);
    }
    
    friend bool operator>=(const Fraction& f1, const Fraction& f2) {
        return (f1 > f2) || (f1 == f2);
    }
    
    friend ostream& operator<<(ostream& os, const Fraction& f) {  // Added const
        if (f.denominator == 1) os << f.numerator;
        else os << f.numerator << "/" << f.denominator;
        return os;
    }
    
    friend istream& operator>>(istream& is, Fraction& f) {
        int num, denom = 1;
        char slash;
        is >> num;
        if (is.peek() == '/') {
            is >> slash >> denom;
        }
        f = Fraction(num, denom);
        return is;
    }
};

int main() {
    Fraction f1(2, 4), f2(3, 6);
    cout << (f1 + f2) << endl;  // Now correctly outputs "1"
    
    cout << "f1: " << f1 << ", f2: " << f2 << endl;
    cout << "f1 + f2: " << (f1 + f2) << endl;
    cout << "f1 - f2: " << (f1 - f2) << endl;
    cout << "f1 * f2: " << (f1 * f2) << endl;
    cout << "f1 / f2: " << (f1 / f2) << endl;
    cout << "f1 == f2: " << (f1 == f2) << endl;
    cout << "f1 != f2: " << (f1 != f2) << endl;
    cout << "f1 < f2: " << (f1 < f2) << endl;
    cout << "f1 > f2: " << (f1 > f2) << endl;
    
    return 0;
}
