#include <iostream>
using namespace std;

template <typename T>
class Base {
protected:
    T value1, value2;
public:
    Base(T v1, T v2) : value1(v1), value2(v2) {}
    
    void printValues() const {
        cout << "Base class values: " << value1 << ", " << value2 << endl;
    }
};

template <typename T>
class Derived : public Base<T> {
public:
    Derived(T v1, T v2) : Base<T>(v1, v2) {}

    void multiplyValues() {
        T result = this->value1 * this->value2;
        cout << "Product of values: " << result << endl;
    }

    void printValues() const {
        Base<T>::printValues();  // Call base class printValues
    }
};

int main() {
    Derived<int> d(4, 5);
    d.printValues();           // Prints values from Base class
    d.multiplyValues();        // Multiplies values from both Base and Derived classes
    
    Derived<float> d2(3.5, 2.5);
    d2.printValues();
    d2.multiplyValues();

    return 0;
}
