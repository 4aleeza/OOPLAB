#include <iostream>
using namespace std;

class Matrix {
    int rows;
    int cols;
    int** matrix;

public:
    Matrix(int r, int c) {
        rows = r;
        cols = c;

        matrix = new int* [rows];
        for (int i = 0; i < rows; ++i) {
            matrix[i] = new int[cols] { 0 };
        }
    }

    void setvals(int i, int j, int value) {
        if (i >= 0 && i < rows && j >= 0 && j < cols) {
            matrix[i][j] = value;
        }
        else {
            cout << "Invalid index!" << endl;
        }
    }

    int getrows() {
        return rows;
    }

    int getcols() {
        return cols;
    }

    void display() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cout << matrix[i][j] << " ";
            }
            cout << endl;
        }
    }

    Matrix add(Matrix& m2) {
        if (this->rows != m2.getrows() || this->cols != m2.getcols()) {
            cout << "Matrices cannot be added" << endl;
            return Matrix(0, 0); // Return an empty matrix
        }

        Matrix result(rows, cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result.matrix[i][j] = this->matrix[i][j] + m2.matrix[i][j];
            }
        }

        return result;
    }

    Matrix multiply(Matrix& m2) {
        if (this->cols != m2.getrows()) {
            cout << "Matrices cannot be multiplied" << endl;
            return Matrix(0, 0); // Return an empty matrix
        }

        Matrix result(this->rows, m2.getcols());
        for (int i = 0; i < this->rows; i++) {
            for (int j = 0; j < m2.getcols(); j++) {
                result.matrix[i][j] = 0;
                for (int k = 0; k < this->cols; k++) {
                    result.matrix[i][j] += this->matrix[i][k] * m2.matrix[k][j];
                }
            }
        }

        return result;
    }

    ~Matrix() {
        for (int i = 0; i < rows; ++i) {
            delete[] matrix[i];
        }
        delete[] matrix;
    }
};

int main() {
    Matrix m1(2, 3);
    m1.setvals(0, 0, 1);
    m1.setvals(0, 1, 2);
    m1.setvals(0, 2, 3);
    m1.setvals(1, 0, 4);
    m1.setvals(1, 1, 5);
    m1.setvals(1, 2, 6);

    Matrix m2(2, 3);
    m2.setvals(0, 0, 7);
    m2.setvals(0, 1, 8);
    m2.setvals(0, 2, 9);
    m2.setvals(1, 0, 10);
    m2.setvals(1, 1, 11);
    m2.setvals(1, 2, 12);

    cout << "Matrix 1:" << endl;
    m1.display();
    cout << "Matrix 2:" << endl;
    m2.display();

    Matrix m3 = m1.add(m2);
    cout << "Sum of Matrix 1 and Matrix 2:" << endl;
    m3.display();

    return 0;
}
